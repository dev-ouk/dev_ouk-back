plugins {
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'checkstyle'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'checkstyle'

    group = 'com.dev-ouk'
    version = '0.0.1-SNAPSHOT'
    description = 'dev_ouk-back'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:3.5.6"
        }
    }

    checkstyle {
        toolVersion = '10.12.4'
        configFile = rootProject.file("config/checkstyle/checkstyle.xml")
        ignoreFailures = false
    }

    spotless {
        java {
            target 'src/**/*.java'
            googleJavaFormat('1.17.0') // Java 17 스타일 기반 포맷터 (21도 문제 없음)
            removeUnusedImports()
            trimTrailingWhitespace()
            endWithNewline()
        }
    }

    tasks.named('test', Test) {
        useJUnitPlatform()
    }
}

tasks.register("checkModuleDeps"){
    group = "verification"
    description = "Check module dependency graph and prevent circular or invalid references."

    doLast{
        subprojects.each { project ->
            project.configurations
                .matching { it.name in ['implementation', 'api', 'compileOnly'] }
                .each { config ->
                    config.dependencies.each {
                        dep ->
                            if (dep instanceof ProjectDependency) {
                                def from = project.name
                                def to = dep.dependencyProject.name

                                // 순환 참조 금지
                                if (from == to) {
                                    throw new GradleException("❌ 순환 의존 발견: ${from} → ${to}")
                                }

                                // domain -> infra/app 금지
                                if(from == 'domain' && (to == 'infra' || to == 'app')) {
                                    throw new GradleException("🚫 domain 모듈이 ${to} 모듈을 참조하면 안 됩니다.")
                                }

                                // infra -> app 금지
                                if(from == 'infra' && to == 'app') {
                                    throw new GradleException("🚫 infra 모듈이 app 모듈을 참조하면 안 됩니다.")
                                }
                            }
                    }
                }
        }
        println "✅ 모듈 의존성 검증 통과!"
    }
}